{"version":3,"sources":["serviceWorker.js","reducers/index.js","store/index.js","translation/index.js","translation/local/en.js","translation/local/nl.js","components/home/index.js","components/people/index.js","components/doors/index.js","components/events/index.js","components/notFound/index.js","components/app/index.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","rootReducer","combineReducers","people","arguments","length","undefined","middleware","applyMiddleware","thunk","logger","reduxDevTools","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","compose","addLocaleData","concat","Object","toConsumableArray","en","nl","translations","en-US","nav","doors","events","home","locale","languages","language","userLanguage","messages","flattenMessages","nestedMessages","prefix","keys","reduce","key","value","prefixedKey","assign","intl","IntlProvider","getChildContext","t","id","formatMessage","Home","react_default","a","createElement","Component","People","Doors","Events","Notfound","routing","react_router_dom","exact","activeClassName","to","react_router","path","component","NotFound","App","className","ReactDOM","render","es","app","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3712fb4d.chunk.js","sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import { combineReducers } from 'redux';\n\nconst initialReducer = (state = []) => state;\n\nconst rootReducer = combineReducers({\n    people: initialReducer\n});\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport rootReducer from '../reducers';\n\nconst middleware = applyMiddleware(thunk, logger);\nconst reduxDevTools =\n    // eslint-disable-next-line no-underscore-dangle\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__();\nconst store = createStore(\n    rootReducer,\n    compose(\n        middleware,\n        reduxDevTools\n    )\n);\nexport default store;\n","import { addLocaleData, IntlProvider } from 'react-intl';\nimport en from 'react-intl/locale-data/en';\nimport nl from 'react-intl/locale-data/nl';\n\nimport enUS from './local/en';\nimport nlNL from './local/nl';\n\naddLocaleData([...en, ...nl]);\n\nconst translations = {\n    'en-US': enUS,\n    nl: nlNL\n};\n\nconst locale =\n    (navigator.languages && navigator.languages[0]) ||\n    navigator.language ||\n    navigator.userLanguage ||\n    'en-US';\n\nconst flattenMessages = (nestedMessages, prefix = '') => {\n    return Object.keys(nestedMessages).reduce((messages, key) => {\n        const value = nestedMessages[key];\n        const prefixedKey = prefix ? `${prefix}.${key}` : key;\n\n        if (typeof value === 'string') {\n            // eslint-disable-next-line no-param-reassign\n            messages[prefixedKey] = value;\n        } else {\n            Object.assign(messages, flattenMessages(value, prefixedKey));\n        }\n\n        return messages;\n    }, {});\n};\n\nconst messages = flattenMessages(translations[locale] || translations['en-US']);\nconst intlProvider = new IntlProvider({ locale, messages });\nconst { intl } = intlProvider.getChildContext();\n\nconst t = id => {\n    return intl.formatMessage({ id });\n};\n\nexport default t;\n","export default {\n    nav: {\n        doors: 'Doors',\n        events: 'Events',\n        home: 'Home',\n        people: 'People'\n    }\n};\n","export default {\n    nav: {\n        doors: 'deuren',\n        events: 'Evenementen',\n        home: 'Huis',\n        people: 'Mensen'\n    }\n};\n","import React, { Component } from 'react';\n\nclass Home extends Component {\n    render() {\n        return <h1>Home</h1>;\n    }\n}\nexport default Home;\n","import React, { Component } from 'react';\n\nclass People extends Component {\n    render() {\n        return <h1>People</h1>;\n    }\n}\nexport default People;\n","import React, { Component } from 'react';\n\nclass Doors extends Component {\n    render() {\n        return <h1>Doors</h1>;\n    }\n}\nexport default Doors;\n","import React, { Component } from 'react';\n\nclass Events extends Component {\n    render() {\n        return <h1>Events</h1>;\n    }\n}\nexport default Events;\n","import React from 'react';\n\nconst Notfound = () => <h1>Not found</h1>;\nexport default Notfound;\n","import React from 'react';\nimport {\n    Route,\n    NavLink,\n    BrowserRouter as Router,\n    Switch\n} from 'react-router-dom';\nimport t from '../../translation';\nimport Home from '../home';\nimport People from '../people';\nimport Doors from '../doors';\nimport Events from '../events';\nimport NotFound from '../notFound';\n\nconst routing = (\n    <Router>\n        <div>\n            <ul>\n                <li>\n                    <NavLink exact activeClassName=\"active\" to=\"/\">\n                        {t('nav.home')}\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink activeClassName=\"active\" to=\"/people\">\n                        {t('nav.people')}\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink activeClassName=\"active\" to=\"/doors\">\n                        {t('nav.doors')}\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink activeClassName=\"active\" to=\"/events\">\n                        {t('nav.events')}\n                    </NavLink>\n                </li>\n            </ul>\n            <hr />\n            <Switch>\n                <Route exact path=\"/\" component={Home} />\n                <Route path=\"/people\" component={People} />\n                <Route path=\"/doors\" component={Doors} />\n                <Route path=\"/events\" component={Events} />\n                <Route component={NotFound} />\n            </Switch>\n        </div>\n    </Router>\n);\n\nconst App = () => {\n    return <div className=\"App\">{routing}</div>;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport App from './components/app';\nimport './index.scss';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}